---
allfab_card_input_datetime:
  show_name: false
  show_icon: false
  variables:
    ulm_card_input_datetime_name: "n/a"
  triggers_update: "all"
  styles:
    grid:
      - grid-template-areas: "'item1' 'item2'"
      - grid-template-columns: "1fr"
      - grid-template-rows: "min-content  min-content"
      - row-gap: "12px"
    card:
      - border-radius: "var(--border-radius)"
      - box-shadow: "var(--box-shadow)"
      - padding: "12px"
  custom_fields:
    item1:
      card:
        type: "custom:button-card"
        template:
          - "icon_info"
          - "ulm_translation_engine"
          - "input_datetime"
        tap_action:
          action: "more-info"
        entity: "[[[ return entity.entity_id ]]]"
        name: "[[[ return variables.ulm_card_input_datetime_name ]]]"
    item2:
      card:
        type: "custom:button-card"
        template: "list_3_items"
        custom_fields:
          item1:
            card:
              type: "custom:button-card"
              template: "widget_icon"
              icon: "mdi:arrow-down"
              tap_action:
                action: "call-service"
                service: "input_datetime.set_datetime"
                service_data:
                  entity_id: "[[[ return entity.entity_id ]]]"
                  time: >
                    [[[
                      var timestamp = entity.attributes.timestamp;

                      let unix_timestamp = timestamp - (3600 + 60);
                      // Create a new JavaScript Date object based on the timestamp
                      // multiplied by 1000 so that the argument is in milliseconds, not seconds.
                      var date = new Date(unix_timestamp * 1000);
                      // Hours part from the timestamp
                      var hours = date.getHours();
                      // Minutes part from the timestamp
                      var minutes = "0" + date.getMinutes();
                      // Seconds part from the timestamp
                      var seconds = "0" + date.getSeconds();

                      // Will display time in 10:30:23 format
                      var formattedTime = hours + ':' + minutes.slice(-2) + ':' + seconds.slice(-2);

                      return formattedTime;
                    ]]]
              hold_action:
                action: "call-service"
                service: "input_datetime.set_datetime"
                service_data:
                  entity_id: "[[[ return entity.entity_id ]]]"
                  time: >
                    [[[
                      var timestamp = entity.attributes.timestamp;
                      // console.log(timestamp);

                      let unix_timestamp = timestamp - (3600 + 60*60);
                      // Create a new JavaScript Date object based on the timestamp
                      // multiplied by 1000 so that the argument is in milliseconds, not seconds.
                      var date = new Date(unix_timestamp * 1000);
                      // Hours part from the timestamp
                      var hours = date.getHours();
                      // Minutes part from the timestamp
                      var minutes = "0" + date.getMinutes();
                      // Seconds part from the timestamp
                      var seconds = "0" + date.getSeconds();

                      // Will display time in 10:30:23 format
                      var formattedTime = hours + ':' + minutes.slice(-2) + ':' + seconds.slice(-2);

                      return formattedTime;
                    ]]]
          item2:
            card:
              type: "custom:button-card"
              template: "allfab_widget_text"
              entity: "[[[ return entity.entity_id ]]]"
              tap_action:
                action: "call-service"
                service: "input_datetime.set_datetime"
                service_data:
                  entity_id: "[[[ return entity.entity_id ]]]"
                  time: >
                    [[[
                      var timestamp = entity.attributes.timestamp;
                      // console.log(timestamp);

                      let unix_timestamp = timestamp;
                      // Create a new JavaScript Date object based on the timestamp
                      // multiplied by 1000 so that the argument is in milliseconds, not seconds.
                      var date = new Date(unix_timestamp * 1000);
                      // Hours part from the timestamp
                      var hours = date.getHours();
                      // Minutes part from the timestamp
                      var minutes = "0" + date.getMinutes();
                      // Seconds part from the timestamp
                      var seconds = "0" + date.getSeconds();

                      // Will display time in 10:30:23 format
                      var formattedTime = hours + ':' + minutes.slice(-2) + ':' + seconds.slice(-2);
                      // console.log('formattedTime : ' + formattedTime);

                      return formattedTime;
                    ]]]
          item3:
            card:
              type: "custom:button-card"
              template: "widget_icon"
              icon: "mdi:arrow-up"
              tap_action:
                action: "call-service"
                service: "input_datetime.set_datetime"
                service_data:
                  entity_id: "[[[ return entity.entity_id ]]]"
                  time: >
                    [[[
                      var timestamp = entity.attributes.timestamp
                      // console.log(timestamp);

                      let unix_timestamp = timestamp - (3600 - 60);
                      var date = new Date(unix_timestamp * 1000);
                      var hours = date.getHours();
                      var minutes = "0" + date.getMinutes();
                      var seconds = "0" + date.getSeconds();
                      var formattedTime = hours + ':' + minutes.slice(-2) + ':' + seconds.slice(-2);

                      // console.log(formattedTime);
                      return formattedTime;
                    ]]]              
              hold_action:
                action: "call-service"
                service: "input_datetime.set_datetime"
                service_data:
                  entity_id: "[[[ return entity.entity_id ]]]"
                  time: >
                    [[[
                      var timestamp = entity.attributes.timestamp;
                      // console.log(timestamp);

                      let unix_timestamp = timestamp - (3600 - 60*60);
                      // Create a new JavaScript Date object based on the timestamp
                      // multiplied by 1000 so that the argument is in milliseconds, not seconds.
                      var date = new Date(unix_timestamp * 1000);
                      // Hours part from the timestamp
                      var hours = date.getHours();
                      // Minutes part from the timestamp
                      var minutes = "0" + date.getMinutes();
                      // Seconds part from the timestamp
                      var seconds = "0" + date.getSeconds();

                      // Will display time in 10:30:23 format
                      var formattedTime = hours + ':' + minutes.slice(-2) + ':' + seconds.slice(-2);

                      return formattedTime;
                    ]]]

input_datetime:
  tap_action:
    action: "more-info"
  show_last_changed: true